"""This module contains functions to sweep parameter-space, creating MCNP
depletion inputs to calculate keff at EOL.
* AR
* core_z
* cool_r
* PD
* power
* enrich
"""
from pyDOE import lhs
import numpy as np
np.random.seed(1324291)

parameters = {'core_r'  : (10, 50),         
              'AR'      : (0.7, 1.3),
              'cool_r'  : (0.5, 1),
              'PD'      : (1.1, 1.6),        
              'power'   : (80, 200),        
              'enrich'  : (0.2, 0.9)
             }

dim = len(parameters.keys())
samples = 1000

def gen_hypercube(samples, N):
    """Generate N-dimensional latin hypercube to sample dimensional reactor
    space.

    Arguments:
    ----------
        samples (int): number of test cases to try
        N (int): number of dimensions to test
    
    Returns:
    --------
        cube (ndarray): normalized, N-D latin hypercube
    """

    np.random.seed(4654562)
    hypercube = lhs(N, samples=samples)

    return hypercube

def fill_data_array(samples, parameters, cube):
    """Fill an ndarray with the sampling set generated by lhs.
    """
    # initialize array
    test_cases = np.zeros(samples, dtype={'names' : list(parameters.keys()) +\
                                           ['keff', 'mass'],
                                    'formats' : ['f8']*8 })
    # for all samples
    for sample_idx, sample in enumerate(cube):
        # get values for every dimension
        for dim_idx, dim in enumerate(sorted(parameters.keys())):
            l_limit = parameters[dim][0]
            u_limit = parameters[dim][1]
            # uniform distribution
            a = u_limit - l_limit
            b = l_limit
            # save to ndarray
            test_cases[sample_idx][dim] = b + cube[sample_idx][dim_idx] * a
    
    return test_cases


